#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ S3.
"""

import argparse
import logging
import sys
from pathlib import Path
from typing import Optional

import boto3
from botocore.exceptions import ClientError, NoCredentialsError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def load_s3_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é S3 –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    config = {
        'endpoint_url': os.getenv('CLEARML_S3_ENDPOINT'),
        'aws_access_key_id': os.getenv('CLEARML_S3_ACCESS_KEY'),
        'aws_secret_access_key': os.getenv('CLEARML_S3_SECRET_KEY'),
        'region_name': os.getenv('CLEARML_S3_REGION', 'us-east-1'),
        'bucket': os.getenv('CLEARML_S3_BUCKET', 'clearml-artifacts'),
        'path_style': os.getenv('CLEARML_S3_PATH_STYLE', 'true').lower() == 'true',
        'verify_ssl': os.getenv('CLEARML_S3_VERIFY_SSL', 'false').lower() == 'true'
    }
    
    return config

def create_s3_client(config):
    """–°–æ–∑–¥–∞–µ—Ç S3 –∫–ª–∏–µ–Ω—Ç."""
    try:
        s3_client = boto3.client(
            's3',
            endpoint_url=config['endpoint_url'],
            aws_access_key_id=config['aws_access_key_id'],
            aws_secret_access_key=config['aws_secret_access_key'],
            region_name=config['region_name'],
            use_ssl=config['verify_ssl']
        )
        return s3_client
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None

def test_s3_connection(s3_client, bucket):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3."""
    try:
        s3_client.head_bucket(Bucket=bucket)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3 —É—Å–ø–µ—à–Ω–æ!")
        return True
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == '404':
            logger.error(f"‚ùå Bucket {bucket} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3: {e}")
        return False

def download_file_from_s3(s3_client, bucket, s3_key, local_file, overwrite=False):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ S3."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not overwrite and local_file.exists():
            logger.info(f"‚è≠Ô∏è  –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {local_file}")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        local_file.parent.mkdir(parents=True, exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º s3://{bucket}/{s3_key} -> {local_file}")
        s3_client.download_file(bucket, s3_key, str(local_file))
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {local_file}")
        return True
        
    except ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == '404':
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3: s3://{bucket}/{s3_key}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è s3://{bucket}/{s3_key}: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {local_file}: {e}")
        return False

def download_processed_nq_data(s3_client, bucket, data_dir, overwrite=False):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ NQ –¥–∞–Ω–Ω—ã–µ."""
    logger.info("üìä –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ NQ –¥–∞–Ω–Ω—ã–µ...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ S3)
    nq_files = [
        ('nq_full_dataset.json', 'nq/nq_full_dataset.json')
    ]
    
    success_count = 0
    for s3_key, local_path in nq_files:
        local_file = data_dir / local_path
        if download_file_from_s3(s3_client, bucket, s3_key, local_file, overwrite):
            success_count += 1
    
    logger.info(f"üìà –°–∫–∞—á–∞–Ω–æ {success_count} NQ —Ñ–∞–π–ª–æ–≤")
    return success_count > 0

def download_processed_simple_qa_data(s3_client, bucket, data_dir, overwrite=False):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ SimpleQA –¥–∞–Ω–Ω—ã–µ."""
    logger.info("üìä –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ SimpleQA –¥–∞–Ω–Ω—ã–µ...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ S3)
    simple_qa_files = [
        ('simple_qa_converted.json', 'simple_qa/simple_qa_converted.json')
    ]
    
    success_count = 0
    for s3_key, local_path in simple_qa_files:
        local_file = data_dir / local_path
        if download_file_from_s3(s3_client, bucket, s3_key, local_file, overwrite):
            success_count += 1
    
    logger.info(f"üìà –°–∫–∞—á–∞–Ω–æ {success_count} SimpleQA —Ñ–∞–π–ª–æ–≤")
    return success_count > 0

def download_processed_both_data(s3_client, bucket, data_dir, overwrite=False):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤."""
    logger.info("üìä –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
    
    nq_success = download_processed_nq_data(s3_client, bucket, data_dir, overwrite)
    simple_qa_success = download_processed_simple_qa_data(s3_client, bucket, data_dir, overwrite)
    
    return nq_success and simple_qa_success

def main():
    parser = argparse.ArgumentParser(description='–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ S3')
    parser.add_argument('--mode', choices=['nq', 'simple_qa', 'both'], default='both',
                       help='–†–µ–∂–∏–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: both)')
    parser.add_argument('--data-dir', type=str, default='data',
                       help='–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data)')
    parser.add_argument('--overwrite', action='store_true',
                       help='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã')
    parser.add_argument('--bucket',
                       help='S3 bucket (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env)')
    
    args = parser.parse_args()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é S3
        config = load_s3_config()
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º bucket –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if args.bucket:
            config['bucket'] = args.bucket
        
        # –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç
        s3_client = create_s3_client(config)
        if not s3_client:
            return 1
        
        bucket = config['bucket']
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3 bucket: {bucket}")
        if not test_s3_connection(s3_client, bucket):
            return 1
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        data_dir = Path(args.data_dir)
        data_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        success = False
        if args.mode == 'nq':
            success = download_processed_nq_data(s3_client, bucket, data_dir, args.overwrite)
        elif args.mode == 'simple_qa':
            success = download_processed_simple_qa_data(s3_client, bucket, data_dir, args.overwrite)
        elif args.mode == 'both':
            success = download_processed_both_data(s3_client, bucket, data_dir, args.overwrite)
        
        if success:
            logger.info("üéâ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return 1
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
