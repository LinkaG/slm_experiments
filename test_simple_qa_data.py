#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SimpleQA –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è RAG —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / "src"))

from data import get_dataset
import json

def test_simple_qa_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É SimpleQA –¥–∞—Ç–∞—Å–µ—Ç–∞."""
    print("=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ SimpleQA –¥–∞—Ç–∞—Å–µ—Ç–∞ ===")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ SimpleQA
    dataset_config = {
        'name': 'local_simple_qa',
        'type': 'simple_qa',
        'use_local': True,
        'train_path': 'data/simple_qa/simple_qa_converted.json',
        'eval_path': 'data/simple_qa/simple_qa_converted.json',
        'cache_dir': '.cache/datasets'
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        print("–°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç...")
        dataset = get_dataset(dataset_config)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        stats = dataset.get_dataset_stats()
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞: {stats}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º train –¥–∞–Ω–Ω—ã–µ
        print("\n=== Train –¥–∞–Ω–Ω—ã–µ ===")
        train_items = list(dataset.get_train_data())
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(train_items)} train —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if train_items:
            item = train_items[0]
            print(f"–ü—Ä–∏–º–µ—Ä train —ç–ª–µ–º–µ–Ω—Ç–∞:")
            print(f"  –í–æ–ø—Ä–æ—Å: {item.question}")
            print(f"  –û—Ç–≤–µ—Ç: {item.answer}")
            print(f"  –ö–æ–Ω—Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {item.context[:100] if item.context else 'None'}...")
            print(f"  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {item.metadata}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º eval –¥–∞–Ω–Ω—ã–µ
        print("\n=== Eval –¥–∞–Ω–Ω—ã–µ ===")
        eval_items = list(dataset.get_eval_data())
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(eval_items)} eval —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if eval_items:
            item = eval_items[0]
            print(f"–ü—Ä–∏–º–µ—Ä eval —ç–ª–µ–º–µ–Ω—Ç–∞:")
            print(f"  –í–æ–ø—Ä–æ—Å: {item.question}")
            print(f"  –û—Ç–≤–µ—Ç: {item.answer}")
            print(f"  –ö–æ–Ω—Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {item.context[:100] if item.context else 'None'}...")
            print(f"  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {item.metadata}")
        
        print("\n‚úÖ SimpleQA –¥–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ SimpleQA –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_simple_qa_format():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ SimpleQA —Ñ–∞–π–ª–∞."""
    print("\n=== –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ SimpleQA —Ñ–∞–π–ª–∞ ===")
    
    file_path = Path("data/simple_qa/simple_qa_converted.json")
    
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞:")
        print(f"  –ö–ª—é—á–∏: {list(data.keys())}")
        
        if 'train' in data:
            print(f"  Train —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data['train'])}")
        if 'eval' in data:
            print(f"  Eval —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data['eval'])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–ª–µ–º–µ–Ω—Ç–∞
        if data.get('train'):
            item = data['train'][0]
            print(f"\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞:")
            print(f"  –ö–ª—é—á–∏: {list(item.keys())}")
            print(f"  –í–æ–ø—Ä–æ—Å: {item.get('question', 'N/A')[:50]}...")
            print(f"  –û—Ç–≤–µ—Ç: {item.get('answer', 'N/A')}")
            print(f"  –ï—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: {bool(item.get('context'))}")
            print(f"  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {list(item.get('metadata', {}).keys())}")
        
        print("‚úÖ –§–æ—Ä–º–∞—Ç SimpleQA —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SimpleQA –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è RAG —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    format_ok = test_simple_qa_format()
    
    if format_ok:
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
        loading_ok = test_simple_qa_loading()
        
        if loading_ok:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã SimpleQA –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –¢–µ—Å—Ç—ã SimpleQA –Ω–µ –ø—Ä–æ—à–ª–∏!")
    else:
        print("\n‚ùå –§–æ—Ä–º–∞—Ç SimpleQA —Ñ–∞–π–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
