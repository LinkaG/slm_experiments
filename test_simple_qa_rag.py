#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç SimpleQA –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –ø–æ–ª–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import json
from pathlib import Path

def test_simple_qa_rag_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å SimpleQA —Å RAG —Å–∏—Å—Ç–µ–º–æ–π."""
    print("=== –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ SimpleQA —Å RAG —Å–∏—Å—Ç–µ–º–æ–π ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    file_path = Path("data/simple_qa/simple_qa_converted.json")
    
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(data.get('train', []))} train, {len(data.get('eval', []))} eval")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è RAG
    eval_items = data.get('eval', [])
    
    if not eval_items:
        print("‚ùå –ù–µ—Ç eval –¥–∞–Ω–Ω—ã—Ö!")
        return False
    
    print(f"\n=== –ê–Ω–∞–ª–∏–∑ RAG —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ===")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    for i, item in enumerate(eval_items[:3]):
        print(f"\n--- –ü—Ä–∏–º–µ—Ä {i+1} ---")
        print(f"–í–æ–ø—Ä–æ—Å: {item['question']}")
        print(f"–û—Ç–≤–µ—Ç: {item['answer']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = item.get('context', '')
        if isinstance(context, list):
            context = ' '.join(context)
        
        print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç (–¥–ª–∏–Ω–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {context[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = item.get('metadata', {})
        print(f"–¢–µ–º–∞: {metadata.get('topic', 'N/A')}")
        print(f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {metadata.get('answer_type', 'N/A')}")
        print(f"URL –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(metadata.get('urls', []))}")
    
    print(f"\n=== RAG —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ===")
    print("‚úÖ –í–æ–ø—Ä–æ—Å—ã: –ï—Å—Ç—å")
    print("‚úÖ –û—Ç–≤–µ—Ç—ã: –ï—Å—Ç—å") 
    print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç: –ï—Å—Ç—å (–¥–æ–∫—É–º–µ–Ω—Ç—ã)")
    print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: –ï—Å—Ç—å")
    
    print(f"\n=== –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è RAG —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    print("1. Oracle Context —Ä–µ–∂–∏–º: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    print("2. Retriever Context —Ä–µ–∂–∏–º: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ç—Ä–∏–≤–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("3. No Context —Ä–µ–∂–∏–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    
    print(f"\n=== –ü—Ä–∏–º–µ—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ ===")
    print("# –¢–µ—Å—Ç —Å –∏–¥–µ–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:")
    print("poetry run python -m src.cli run-experiment model=smollm2_135m dataset=local_simple_qa experiment_mode=oracle_context")
    print()
    print("# –¢–µ—Å—Ç —Å —Ä–µ—Ç—Ä–∏–≤–µ—Ä–æ–º:")
    print("poetry run python -m src.cli run-experiment model=smollm2_135m dataset=local_simple_qa experiment_mode=retriever_context")
    print()
    print("# –¢–µ—Å—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")
    print("poetry run python -m src.cli run-experiment model=smollm2_135m dataset=local_simple_qa experiment_mode=no_context")
    
    return True

def analyze_simple_qa_topics():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º—ã –≤ SimpleQA –¥–∞—Ç–∞—Å–µ—Ç–µ."""
    print(f"\n=== –ê–Ω–∞–ª–∏–∑ —Ç–µ–º SimpleQA ===")
    
    file_path = Path("data/simple_qa/simple_qa_converted.json")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–º—ã
    topics = {}
    answer_types = {}
    
    for item in data.get('eval', []):
        metadata = item.get('metadata', {})
        topic = metadata.get('topic', 'Unknown')
        answer_type = metadata.get('answer_type', 'Unknown')
        
        topics[topic] = topics.get(topic, 0) + 1
        answer_types[answer_type] = answer_types.get(answer_type, 0) + 1
    
    print("–¢–µ–º—ã –≤ eval –¥–∞–Ω–Ω—ã—Ö:")
    for topic, count in sorted(topics.items(), key=lambda x: x[1], reverse=True):
        print(f"  {topic}: {count}")
    
    print("\n–¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤:")
    for answer_type, count in sorted(answer_types.items(), key=lambda x: x[1], reverse=True):
        print(f"  {answer_type}: {count}")

if __name__ == "__main__":
    print("–ê–Ω–∞–ª–∏–∑ SimpleQA –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    compatibility_ok = test_simple_qa_rag_compatibility()
    
    if compatibility_ok:
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º
        analyze_simple_qa_topics()
        
        print(f"\nüéâ SimpleQA –≥–æ—Ç–æ–≤ –¥–ª—è RAG —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤!")
    else:
        print(f"\n‚ùå SimpleQA –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è RAG —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤!")
