#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ClearML.
–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.
"""

import os
import sys
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_clearml_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª ClearML."""
    
    config_content = """api {
    # Notice: 'host' is the api server (default port 8008), not the web server.
    api_server: http://51.250.43.3:8008
    web_server: http://51.250.43.3:8080
    files_server: http://51.250.43.3:8081
    # Credentials are generated using the webapp, http://51.250.43.3:8080
    credentials {
        "access_key" = "your-access-key"
        "secret_key" = "your-secret-key"
    }
}
sdk {
    # Storage for output models and other artifacts
    storage {
        cache {
            # Defaults to system temp folder / cache
            default_base_dir: "~/clearml/cache"
        }
        # S3 storage configuration for artifacts
        s3 {
            endpoint_url: "http://51.250.43.3:9000"
            bucket: "clearml-artifacts"
            access_key: "minio_admin_2024"
            secret_key: "Kx9mP7$vL2@nQ8!wE5&rT3*yU6+iO1-pA4^sD9~fG0"
            region: "us-east-1"
            path_style: true
            verify_ssl: false
        }
    }
}
"""
    
    # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    config_path = Path.home() / ".clearml.conf"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        config_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_path, 'w') as f:
            f.write(config_content)
        
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {config_path}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def setup_environment_variables():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è ClearML."""
    
    env_vars = {
        "CLEARML_API_HOST": "http://51.250.43.3:8008",
        "CLEARML_WEB_HOST": "http://51.250.43.3:8080",
        "CLEARML_FILES_HOST": "http://51.250.43.3:8081",
        "CLEARML_S3_ENDPOINT": "http://51.250.43.3:9000",
        "CLEARML_S3_BUCKET": "clearml-artifacts",
        "CLEARML_S3_ACCESS_KEY": "minio_admin_2024",
        "CLEARML_S3_SECRET_KEY": "Kx9mP7$vL2@nQ8!wE5&rT3*yU6+iO1-pA4^sD9~fG0"
    }
    
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    for key, value in env_vars.items():
        os.environ[key] = value
        logger.info(f"  {key} = {value}")
    
    return True

def create_env_file():
    """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    
    env_content = """# ClearML Configuration
CLEARML_API_HOST=http://51.250.43.3:8008
CLEARML_WEB_HOST=http://51.250.43.3:8080
CLEARML_FILES_HOST=http://51.250.43.3:8081

# S3 Storage Configuration
CLEARML_S3_ENDPOINT=http://51.250.43.3:9000
CLEARML_S3_BUCKET=clearml-artifacts
CLEARML_S3_ACCESS_KEY=minio_admin_2024
CLEARML_S3_SECRET_KEY=Kx9mP7$vL2@nQ8!wE5&rT3*yU6+iO1-pA4^sD9~fG0
CLEARML_S3_REGION=us-east-1
CLEARML_S3_PATH_STYLE=true
CLEARML_S3_VERIFY_SSL=false
"""
    
    env_path = Path(".env")
    
    try:
        with open(env_path, 'w') as f:
            f.write(env_content)
        
        logger.info(f"‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {env_path}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
        return False

def print_instructions():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ."""
    
    instructions = """
üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï CLEARML:

1. üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
   - –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://51.250.43.3:8080
   - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Workspace ‚Üí Create new credentials
   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ access_key –∏ secret_key

2. ‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
   - –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª ~/.clearml.conf
   - –ó–∞–º–µ–Ω–∏—Ç–µ "your-access-key" –∏ "your-secret-key" –Ω–∞ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   - –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª

3. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
   python test_clearml_connection.py

4. üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:
   poetry run python -m src.cli run-experiment model=smollm2_135m dataset=local_nq

üìä –î–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º:
   - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://51.250.43.3:8080
   - API: http://51.250.43.3:8008
   - S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: http://51.250.43.3:9000
"""
    
    logger.info(instructions)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ClearML –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    logger.info("=" * 60)
    
    results = []
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    results.append(("Environment variables", setup_environment_variables()))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    logger.info("2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    results.append(("Config file", create_clearml_config()))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    logger.info("3. –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")
    results.append(("Env file", create_env_file()))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("=" * 60)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–°–¢–†–û–ô–ö–ò:")
    
    passed = 0
    total = len(results)
    
    for step_name, result in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        logger.info(f"  {step_name}: {status}")
        if result:
            passed += 1
    
    logger.info("=" * 60)
    
    if passed == total:
        logger.info("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print_instructions()
        return 0
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
