#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ S3.

–°–∫–∞—á–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ S3, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ S3.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    poetry run python process_s3_data.py --help
"""

import boto3
import json
import argparse
from pathlib import Path
from typing import Dict, Any
import logging
from dotenv import load_dotenv
import os
import tempfile
import subprocess
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def load_s3_config() -> Dict[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é S3 –∏–∑ .env —Ñ–∞–π–ª–∞."""
    load_dotenv()
    
    config = {
        'aws_access_key_id': os.getenv('CLEARML_S3_ACCESS_KEY'),
        'aws_secret_access_key': os.getenv('CLEARML_S3_SECRET_KEY'),
        'region_name': os.getenv('CLEARML_S3_REGION', 'us-east-1'),
        'endpoint_url': os.getenv('CLEARML_S3_ENDPOINT'),
        'bucket': os.getenv('CLEARML_S3_BUCKET')
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    required = ['aws_access_key_id', 'aws_secret_access_key', 'bucket']
    missing = [key for key in required if not config[key]]
    
    if missing:
        raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ .env: {missing}")
    
    return config

def create_s3_client(config: Dict[str, str]) -> boto3.client:
    """–°–æ–∑–¥–∞–µ—Ç S3 –∫–ª–∏–µ–Ω—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
    s3_config = {
        'aws_access_key_id': config['aws_access_key_id'],
        'aws_secret_access_key': config['aws_secret_access_key'],
        'region_name': config['region_name']
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º endpoint_url –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω (–¥–ª—è MinIO –∏ –¥—Ä—É–≥–∏—Ö S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â)
    if config.get('endpoint_url'):
        s3_config['endpoint_url'] = config['endpoint_url']
    
    return boto3.client('s3', **s3_config)

def download_from_s3(s3_client: boto3.client, bucket: str, s3_key: str, local_file: Path) -> bool:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ S3."""
    try:
        logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º s3://{bucket}/{s3_key} -> {local_file}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        local_file.parent.mkdir(parents=True, exist_ok=True)
        
        s3_client.download_file(bucket, s3_key, str(local_file))
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {local_file}")
        return True
        
    except s3_client.exceptions.NoSuchKey:
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3: s3://{bucket}/{s3_key}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è s3://{bucket}/{s3_key}: {e}")
        return False

def upload_to_s3(s3_client: boto3.client, bucket: str, local_file: Path, s3_key: str) -> bool:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ S3."""
    try:
        logger.info(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º {local_file} -> s3://{bucket}/{s3_key}")
        
        with open(local_file, 'rb') as f:
            s3_client.upload_fileobj(f, bucket, s3_key)
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: s3://{bucket}/{s3_key}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {local_file}: {e}")
        return False

def process_nq_data(s3_client: boto3.client, bucket: str, work_dir: Path, upload_results: bool = True):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç NQ –¥–∞–Ω–Ω—ã–µ: —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Natural Questions –¥–∞–Ω–Ω—ã–µ...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
    if upload_results:
        # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ S3, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        target_dir = work_dir / 'data' / 'nq'
    else:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É data/
        target_dir = Path('data') / 'nq'
    
    target_dir.mkdir(parents=True, exist_ok=True)
    
    # 1. –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    original_file = target_dir / 'NQ-open.dev.merged.jsonl'
    if not download_from_s3(s3_client, bucket, 'NQ-open.dev.merged.jsonl', original_file):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª NQ")
        return False
    
    # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    logger.info("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º NQ –¥–∞–Ω–Ω—ã–µ...")
    converted_file = target_dir / 'nq_full_dataset.json'
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        cmd = [
            sys.executable, 'convert_nq_data.py',
            '--input', str(original_file),
            '--output', str(converted_file)
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=Path.cwd())
        
        if result.returncode != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ NQ: {result.stderr}")
            return False
        
        logger.info("‚úÖ NQ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ NQ: {e}")
        return False
    
    # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ S3 (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if upload_results:
        if not upload_to_s3(s3_client, bucket, converted_file, 'nq_full_dataset.json'):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª NQ")
            return False
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ NQ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return True

def process_simple_qa_data(s3_client: boto3.client, bucket: str, work_dir: Path, upload_results: bool = True):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SimpleQA –¥–∞–Ω–Ω—ã–µ: —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SimpleQA –¥–∞–Ω–Ω—ã–µ...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
    if upload_results:
        # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ S3, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        target_dir = work_dir / 'data' / 'simple_qa'
    else:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É data/
        target_dir = Path('data') / 'simple_qa'
    
    target_dir.mkdir(parents=True, exist_ok=True)
    
    # 1. –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    original_file = target_dir / 'simple_qa_test_set_with_documents.csv'
    if not download_from_s3(s3_client, bucket, 'simple_qa_test_set_with_documents.csv', original_file):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª SimpleQA")
        return False
    
    # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    logger.info("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SimpleQA –¥–∞–Ω–Ω—ã–µ...")
    converted_file = target_dir / 'simple_qa_converted.json'
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        cmd = [
            sys.executable, 'convert_simple_qa_data.py',
            '--input', str(original_file),
            '--output', str(converted_file)
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=Path.cwd())
        
        if result.returncode != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SimpleQA: {result.stderr}")
            return False
        
        logger.info("‚úÖ SimpleQA –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SimpleQA: {e}")
        return False
    
    # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ S3 (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if upload_results:
        if not upload_to_s3(s3_client, bucket, converted_file, 'simple_qa_converted.json'):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª SimpleQA")
            return False
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ SimpleQA –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return True

def test_s3_connection(s3_client: boto3.client, bucket: str) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3."""
    try:
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3 bucket: {bucket}")
        s3_client.head_bucket(Bucket=bucket)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3 —É—Å–ø–µ—à–Ω–æ!")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description='–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ S3')
    parser.add_argument('--mode', choices=['nq', 'simple_qa', 'both'], required=True,
                       help='–†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏: nq, simple_qa, both')
    parser.add_argument('--work-dir', default='temp_s3_processing',
                       help='–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: temp_s3_processing)')
    parser.add_argument('--no-upload', action='store_true',
                       help='–ù–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ S3')
    parser.add_argument('--bucket',
                       help='S3 bucket (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env)')
    parser.add_argument('--cleanup', action='store_true',
                       help='–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    
    args = parser.parse_args()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é S3
        config = load_s3_config()
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º bucket –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if args.bucket:
            config['bucket'] = args.bucket
        
        # –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç
        s3_client = create_s3_client(config)
        bucket = config['bucket']
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not test_s3_connection(s3_client, bucket):
            return 1
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        work_dir = Path(args.work_dir)
        work_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {work_dir}")
        
        success = True
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if args.mode in ['nq', 'both']:
            if not process_nq_data(s3_client, bucket, work_dir, not args.no_upload):
                success = False
        
        if args.mode in ['simple_qa', 'both']:
            if not process_simple_qa_data(s3_client, bucket, work_dir, not args.no_upload):
                success = False
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if args.cleanup:
            logger.info(f"üßπ –£–¥–∞–ª—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {work_dir}")
            import shutil
            shutil.rmtree(work_dir)
        
        if success:
            logger.info("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            logger.error("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
            return 1
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == '__main__':
    exit(main())
