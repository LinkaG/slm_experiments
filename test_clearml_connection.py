#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClearML —Å–µ—Ä–≤–µ—Ä—É.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API, –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
"""

import os
import sys
import requests
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClearML API."""
    api_url = "http://51.250.43.3:8008"
    try:
        response = requests.get(f"{api_url}/v2.3/system/version", timeout=10)
        if response.status_code == 200:
            logger.info(f"‚úÖ ClearML API –¥–æ—Å—Ç—É–ø–µ–Ω: {api_url}")
            return True
        else:
            logger.error(f"‚ùå ClearML API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClearML API: {e}")
        return False

def test_web_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClearML Web UI."""
    web_url = "http://51.250.43.3:8080"
    try:
        response = requests.get(web_url, timeout=10)
        if response.status_code == 200:
            logger.info(f"‚úÖ ClearML Web UI –¥–æ—Å—Ç—É–ø–µ–Ω: {web_url}")
            return True
        else:
            logger.error(f"‚ùå ClearML Web UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClearML Web UI: {e}")
        return False

def test_s3_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MinIO S3."""
    s3_url = "http://51.250.43.3:9000"
    try:
        response = requests.get(s3_url, timeout=10)
        if response.status_code in [200, 403]:  # 403 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            logger.info(f"‚úÖ MinIO S3 –¥–æ—Å—Ç—É–ø–µ–Ω: {s3_url}")
            return True
        else:
            logger.error(f"‚ùå MinIO S3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MinIO S3: {e}")
        return False

def test_clearml_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ClearML."""
    try:
        from clearml import Task, Logger
        logger.info("‚úÖ ClearML –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        task = Task.init(
            project_name="test-connection",
            task_name="clearml-connection-test",
            auto_connect_frameworks=False
        )
        logger.info("‚úÖ ClearML Task —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger_clearml = Logger.current_logger()
        if logger_clearml:
            logger_clearml.report_scalar(
                title="test",
                series="connection",
                value=1.0,
                iteration=0
            )
            logger.info("‚úÖ ClearML Logger —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
        task.close()
        logger.info("‚úÖ ClearML Task —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å ClearML: {e}")
        return False

def check_config_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    config_path = Path.home() / ".clearml.conf"
    if config_path.exists():
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {config_path}")
        try:
            with open(config_path, 'r') as f:
                content = f.read()
                if "51.250.43.3" in content:
                    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    else:
        logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        logger.info("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ clearml.conf –≤ ~/.clearml.conf")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClearML —Å–µ—Ä–≤–µ—Ä—É...")
    logger.info("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    results.append(("Config file", check_config_file()))
    
    # –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    logger.info("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ClearML API...")
    results.append(("API Connection", test_api_connection()))
    
    # –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Web UI
    logger.info("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ClearML Web UI...")
    results.append(("Web UI Connection", test_web_connection()))
    
    # –¢–µ—Å—Ç 4: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3
    logger.info("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MinIO S3...")
    results.append(("S3 Connection", test_s3_connection()))
    
    # –¢–µ—Å—Ç 5: –ò–º–ø–æ—Ä—Ç –∏ —Ä–∞–±–æ—Ç–∞ —Å ClearML
    logger.info("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ClearML SDK...")
    results.append(("ClearML SDK", test_clearml_import()))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("=" * 60)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    logger.info("=" * 60)
    logger.info(f"üìà –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ClearML –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
