#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ClearML
"""

import logging
from pathlib import Path
from src.utils.clearml_config import (
    load_clearml_config,
    setup_clearml_environment,
    create_clearml_task,
    get_clearml_logger,
    log_experiment_config,
    log_metrics_to_clearml
)

def test_clearml_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ClearML –∏–∑ .env —Ñ–∞–π–ª–∞."""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ClearML...")
    
    try:
        config = load_clearml_config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ClearML –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(config)}")
        
        for key, value in config.items():
            # –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏
            if 'SECRET' in key or 'KEY' in key:
                print(f"  {key}: {'*' * len(str(value))}")
            else:
                print(f"  {key}: {value}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_clearml_environment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–∫—Ä—É–∂–µ–Ω–∏—è ClearML."""
    print("\nüåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ClearML...")
    
    try:
        setup_clearml_environment()
        print("‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ ClearML –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

def test_clearml_task_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ ClearML –∑–∞–¥–∞—á–∏."""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è ClearML –∑–∞–¥–∞—á–∏...")
    
    try:
        task = create_clearml_task(
            project_name="slm-experiments-test",
            task_name="test-integration",
            tags=["test", "integration"]
        )
        print("‚úÖ ClearML –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä ID –∑–∞–¥–∞—á–∏: {task.id}")
        print(f"üìä –ù–∞–∑–≤–∞–Ω–∏–µ: {task.name}")
        print(f"üìä –ü—Ä–æ–µ–∫—Ç: {task.project}")
        
        return task
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return None

def test_clearml_logging():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ ClearML."""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ ClearML...")
    
    try:
        logger = get_clearml_logger()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_config = {
            "model": {"name": "test-model", "size": "1.7B"},
            "dataset": {"name": "test-dataset", "samples": 1000},
            "experiment": {"name": "test-experiment", "mode": "test"}
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        log_experiment_config(logger, test_config)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        test_metrics = {
            "token_recall": 0.85,
            "num_examples": 100,
            "duration_seconds": 120.5
        }
        log_metrics_to_clearml(logger, test_metrics)
        
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ ClearML —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ClearML")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_ok = test_clearml_config()
    
    # –¢–µ—Å—Ç 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_ok = test_clearml_environment()
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏)
    task = None
    if config_ok and env_ok:
        task = test_clearml_task_creation()
    
    # –¢–µ—Å—Ç 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞)
    logging_ok = False
    if task:
        logging_ok = test_clearml_logging()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if config_ok else '‚ùå'}")
    print(f"  –û–∫—Ä—É–∂–µ–Ω–∏–µ: {'‚úÖ' if env_ok else '‚ùå'}")
    print(f"  –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {'‚úÖ' if task else '‚ùå'}")
    print(f"  –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if logging_ok else '‚ùå'}")
    
    if all([config_ok, env_ok, task, logging_ok]):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! ClearML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        if task:
            print(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É: {task.get_output_log_web_page()}")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ClearML.")
    
    return all([config_ok, env_ok, task, logging_ok])

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
