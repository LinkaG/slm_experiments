#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â—É.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫—Ä–µ–¥–µ–Ω—à–∏–∞–ª–æ–≤
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å bucket
- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    poetry run python test_s3_connection.py
"""

import boto3
import argparse
from pathlib import Path
from typing import Dict, Any, List
import logging
from dotenv import load_dotenv
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def load_s3_config() -> Dict[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é S3 –∏–∑ .env —Ñ–∞–π–ª–∞."""
    load_dotenv()
    
    config = {
        'aws_access_key_id': os.getenv('CLEARML_S3_ACCESS_KEY'),
        'aws_secret_access_key': os.getenv('CLEARML_S3_SECRET_KEY'),
        'region_name': os.getenv('CLEARML_S3_REGION', 'us-east-1'),
        'endpoint_url': os.getenv('CLEARML_S3_ENDPOINT'),
        'bucket': os.getenv('CLEARML_S3_BUCKET')
    }
    
    return config

def create_s3_client(config: Dict[str, str]) -> boto3.client:
    """–°–æ–∑–¥–∞–µ—Ç S3 –∫–ª–∏–µ–Ω—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
    s3_config = {
        'aws_access_key_id': config['aws_access_key_id'],
        'aws_secret_access_key': config['aws_secret_access_key'],
        'region_name': config['region_name']
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º endpoint_url –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω (–¥–ª—è MinIO –∏ –¥—Ä—É–≥–∏—Ö S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â)
    if config.get('endpoint_url'):
        s3_config['endpoint_url'] = config['endpoint_url']
    
    return boto3.client('s3', **s3_config)

def test_credentials(s3_client: boto3.client) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–µ–¥–µ–Ω—à–∏–∞–ª—ã S3."""
    try:
        logger.info("üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–µ–¥–µ–Ω—à–∏–∞–ª—ã...")
        s3_client.list_buckets()
        logger.info("‚úÖ –ö—Ä–µ–¥–µ–Ω—à–∏–∞–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫—Ä–µ–¥–µ–Ω—à–∏–∞–ª–æ–≤: {e}")
        return False

def test_bucket_access(s3_client: boto3.client, bucket: str) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ bucket."""
    try:
        logger.info(f"ü™£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ bucket: {bucket}")
        s3_client.head_bucket(Bucket=bucket)
        logger.info("‚úÖ –î–æ—Å—Ç—É–ø –∫ bucket —É—Å–ø–µ—à–µ–Ω!")
        return True
    except s3_client.exceptions.NoSuchBucket:
        logger.error(f"‚ùå Bucket –Ω–µ –Ω–∞–π–¥–µ–Ω: {bucket}")
        return False
    except s3_client.exceptions.ClientError as e:
        error_code = e.response['Error']['Code']
        if error_code == '403':
            logger.error(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ bucket: {bucket}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def list_buckets(s3_client: boto3.client) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö buckets."""
    try:
        logger.info("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö buckets...")
        response = s3_client.list_buckets()
        buckets = [bucket['Name'] for bucket in response['Buckets']]
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(buckets)} buckets:")
        for bucket in buckets:
            logger.info(f"  - {bucket}")
        
        return buckets
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ buckets: {e}")
        return []

def list_bucket_contents(s3_client: boto3.client, bucket: str, prefix: str = "") -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket."""
    try:
        logger.info(f"üìÅ –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket: {bucket}")
        if prefix:
            logger.info(f"üîç –ü—Ä–µ—Ñ–∏–∫—Å: {prefix}")
        
        response = s3_client.list_objects_v2(Bucket=bucket, Prefix=prefix)
        objects = []
        
        if 'Contents' in response:
            for obj in response['Contents']:
                objects.append({
                    'key': obj['Key'],
                    'size': obj['Size'],
                    'last_modified': obj['LastModified']
                })
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ–±—ä–µ–∫—Ç–æ–≤
        for i, obj in enumerate(objects[:10]):
            size_mb = obj['size'] / (1024 * 1024)
            logger.info(f"  {i+1}. {obj['key']} ({size_mb:.2f} MB, {obj['last_modified']})")
        
        if len(objects) > 10:
            logger.info(f"  ... –∏ –µ—â–µ {len(objects) - 10} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        return objects
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ bucket: {e}")
        return []

def test_file_operations(s3_client: boto3.client, bucket: str) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞)."""
    try:
        test_key = f"test_connection_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        test_content = f"Test file created at {datetime.now()}"
        
        logger.info(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        logger.info(f"  –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_key}")
        s3_client.put_object(
            Bucket=bucket,
            Key=test_key,
            Body=test_content.encode('utf-8')
        )
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        logger.info(f"  –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_key}")
        response = s3_client.get_object(Bucket=bucket, Key=test_key)
        content = response['Body'].read().decode('utf-8')
        
        if content == test_content:
            logger.info("‚úÖ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
            return False
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        logger.info(f"  –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_key}")
        s3_client.delete_object(Bucket=bucket, Key=test_key)
        logger.info("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏: {e}")
        return False

def check_dataset_files(s3_client: boto3.client, bucket: str) -> Dict[str, bool]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤."""
    logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ (—Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ S3)
    dataset_files = {
        'NQ Original': 'NQ-open.dev.merged.jsonl',
        'NQ Full Dataset': 'nq_full_dataset.json',
        'NQ Eval': 'nq_converted_eval.json',
        'NQ Train': 'nq_converted_train.json',
        'SimpleQA Original': 'simple_qa_test_set_with_documents.csv',
        'SimpleQA Dataset': 'simple_qa_converted.json',
        'SimpleQA Train': 'simple_qa_train.json',
        'SimpleQA Eval': 'simple_qa_eval.json'
    }
    
    results = {}
    
    for name, key in dataset_files.items():
        try:
            s3_client.head_object(Bucket=bucket, Key=key)
            results[name] = True
            logger.info(f"‚úÖ {name}: {key}")
        except s3_client.exceptions.NoSuchKey:
            results[name] = False
            logger.warning(f"‚ùå {name}: {key} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
        except Exception as e:
            results[name] = False
            logger.error(f"‚ùå {name}: {key} (–æ—à–∏–±–∫–∞: {e})")
    
    return results

def main():
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3')
    parser.add_argument('--bucket',
                       help='S3 bucket –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env)')
    parser.add_argument('--prefix',
                       help='–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤')
    parser.add_argument('--test-operations', action='store_true',
                       help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ/—á—Ç–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)')
    parser.add_argument('--check-datasets', action='store_true',
                       help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤')
    
    args = parser.parse_args()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é S3
        config = load_s3_config()
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º bucket –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if args.bucket:
            config['bucket'] = args.bucket
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        required = ['aws_access_key_id', 'aws_secret_access_key', 'bucket']
        missing = [key for key in required if not config[key]]
        
        if missing:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ .env: {missing}")
            logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç:")
            logger.info("   CLEARML_S3_ACCESS_KEY=your_key")
            logger.info("   CLEARML_S3_SECRET_KEY=your_secret")
            logger.info("   CLEARML_S3_BUCKET=your_bucket")
            return 1
        
        # –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç
        s3_client = create_s3_client(config)
        bucket = config['bucket']
        
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        logger.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        logger.info(f"   Endpoint: {config.get('endpoint_url', 'default AWS')}")
        logger.info(f"   Region: {config['region_name']}")
        logger.info(f"   Bucket: {bucket}")
        
        # –¢–µ—Å—Ç 1: –ö—Ä–µ–¥–µ–Ω—à–∏–∞–ª—ã
        if not test_credentials(s3_client):
            return 1
        
        # –¢–µ—Å—Ç 2: –î–æ—Å—Ç—É–ø –∫ bucket
        if not test_bucket_access(s3_client, bucket):
            return 1
        
        # –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ buckets
        list_buckets(s3_client)
        
        # –¢–µ—Å—Ç 4: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket
        list_bucket_contents(s3_client, bucket, args.prefix or "")
        
        # –¢–µ—Å—Ç 5: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if args.test_operations:
            if not test_file_operations(s3_client, bucket):
                return 1
        
        # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if args.check_datasets:
            dataset_results = check_dataset_files(s3_client, bucket)
            available = sum(1 for v in dataset_results.values() if v)
            total = len(dataset_results)
            logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {available}/{total}")
        
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == '__main__':
    exit(main())
