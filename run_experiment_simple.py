#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º configs/config.yaml
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ ClearML
"""

import logging
import traceback
import argparse
from pathlib import Path
from omegaconf import OmegaConf
import json
import time
from statistics import mean

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from src.experiment.runner import ExperimentRunner, ExperimentConfig
from src.models import get_model
from src.retrievers import get_retriever
from src.data import get_dataset
from src.data.base import DatasetItem

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('experiment.log')
        ]
    )
    return logging.getLogger(__name__)


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –º–∞–ª—ã–º–∏ —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏')
    parser.add_argument('--use-clearml', action='store_true', default=True,
                        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ClearML –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: True)')
    parser.add_argument('--no-clearml', action='store_true',
                        help='–û—Ç–∫–ª—é—á–∏—Ç—å ClearML –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--env-file', type=str, default='.env',
                        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ClearML')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Hydra –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser.add_argument('--config-path', type=str, default='configs',
                        help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º')
    parser.add_argument('--config-name', type=str, default='config',
                        help='–ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞')
    
    return parser.parse_args()

def run_experiment_with_config(use_clearml=True, env_file='.env'):
    """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º configs/config.yaml"""
    logger = setup_logging()
    
    if use_clearml:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å ClearML –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    else:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –±–µ–∑ ClearML –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é Hydra
        from hydra import initialize, compose
        from hydra.core.global_hydra import GlobalHydra
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Hydra
        GlobalHydra.instance().clear()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Hydra
        with initialize(config_path="configs", version_base=None):
            config = compose(config_name="config")
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        train_path = Path(config.dataset.train_path)
        eval_path = Path(config.dataset.eval_path)

        if not train_path.exists() or not eval_path.exists():
            logger.error("‚ùå –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
            return False
        logger.info("‚úÖ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã")

        output_dir = Path(config.experiment.output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {output_dir}")

        logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        dataset = get_dataset(config.dataset)
        
        # –†–µ—Ç—Ä–∏–≤–µ—Ä –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        retriever = None
        if config.experiment_mode.get('use_retriever', False):
            retriever = get_retriever(config.retriever)

        model = get_model(config.model)

        eval_data = list(dataset.get_eval_data())
        logger.info(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(eval_data)}")
        logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {config.model.name}")
        logger.info(f"üîç –†–µ–∂–∏–º: {config.experiment_mode.name}")

        logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º ExperimentConfig –¥–ª—è ExperimentRunner
        experiment_config = ExperimentConfig(
            name=config.experiment.name,
            model_config=dict(config.model),
            retriever_config=dict(config.retriever) if hasattr(config, 'retriever') else {},
            dataset_config=dict(config.dataset),
            metrics_config={"metrics": config.experiment_mode.metrics} if hasattr(config.experiment_mode, 'metrics') else {},
            output_dir=output_dir,
            model=model,  # –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–¥–µ–ª—å
            max_samples=config.experiment_mode.get('max_samples'),
            use_retriever=config.experiment_mode.get('use_retriever', False),
            context_type=config.experiment_mode.get('context_type', 'none')
        )

        runner = ExperimentRunner(experiment_config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        runner.run(model, retriever, dataset, use_clearml=use_clearml)

        logger.info("üéâ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_dir}/")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {e}")
        logger.error(traceback.format_exc())
        logger.info("üí• –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
        return False
    return True

if __name__ == "__main__":
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    args = parse_arguments()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ ClearML
    use_clearml = args.use_clearml and not args.no_clearml
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
    run_experiment_with_config(use_clearml=use_clearml, env_file=args.env_file)
