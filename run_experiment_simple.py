#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º configs/config.yaml
"""

import logging
import traceback
from pathlib import Path
from omegaconf import OmegaConf
import json
import time
from statistics import mean

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from src.experiment.runner import ExperimentRunner, ExperimentConfig
from src.models import get_model
from src.retrievers import get_retriever
from src.data import get_dataset
from src.data.base import DatasetItem

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('experiment.log')
        ]
    )
    return logging.getLogger(__name__)

def run_experiment_with_config():
    """–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º configs/config.yaml"""
    logger = setup_logging()
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é Hydra
        from hydra import initialize, compose
        from hydra.core.global_hydra import GlobalHydra
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Hydra
        GlobalHydra.instance().clear()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Hydra
        with initialize(config_path="configs", version_base=None):
            config = compose(config_name="config")
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        train_path = Path(config.dataset.train_path)
        eval_path = Path(config.dataset.eval_path)

        if not train_path.exists() or not eval_path.exists():
            logger.error("‚ùå –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
            return False
        logger.info("‚úÖ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã")

        output_dir = Path(config.experiment.output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {output_dir}")

        logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        dataset = get_dataset(config.dataset)
        
        # –†–µ—Ç—Ä–∏–≤–µ—Ä –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        retriever = None
        if config.experiment_mode.get('use_retriever', False):
            retriever = get_retriever(config.retriever)

        model = get_model(config.model)

        eval_data = list(dataset.get_eval_data())
        logger.info(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(eval_data)}")
        logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {config.model.name}")
        logger.info(f"üîç –†–µ–∂–∏–º: {config.experiment_mode.name}")

        logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º ExperimentConfig –¥–ª—è ExperimentRunner
        experiment_config = ExperimentConfig(
            name=config.experiment.name,
            model_config=dict(config.model),
            retriever_config=dict(config.retriever) if hasattr(config, 'retriever') else {},
            dataset_config=dict(config.dataset),
            metrics_config={"metrics": config.experiment_mode.metrics} if hasattr(config.experiment_mode, 'metrics') else {},
            output_dir=output_dir,
            model=model,  # –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–¥–µ–ª—å
            max_samples=config.experiment_mode.get('max_samples'),
            use_retriever=config.experiment_mode.get('use_retriever', False),
            context_type=config.experiment_mode.get('context_type', 'none')
        )

        runner = ExperimentRunner(experiment_config)
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º setup_experiment –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è ClearML
        def mock_setup_experiment(self):
            self.config.output_dir.mkdir(parents=True, exist_ok=True)
            self.logger.info(f"üöÄ –ù–∞—á–∞–ª–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ (–±–µ–∑ ClearML)")
            self.logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {self.config.output_dir}")
            self.logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {self.config.model_config.get('name', 'unknown')}")
            self.logger.info(f"üìä –î–∞—Ç–∞—Å–µ—Ç: {self.config.dataset_config.get('name', 'unknown')}")
            self.logger.info(f"üîç –†–µ–∂–∏–º: {self.config.context_type}")

        ExperimentRunner.setup_experiment = mock_setup_experiment
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º _save_results –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
        def mock_save_results(self, metrics):
            results_file = self.config.output_dir / "results.json"
            with open(results_file, "w", encoding='utf-8') as f:
                json.dump(metrics, f, ensure_ascii=False, indent=2)
            self.logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
            self.logger.info(f"üìä Token Recall: {metrics.get('token_recall', 0.0):.3f}")
            self.logger.info(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {metrics.get('num_examples', 0)}")
            self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {metrics.get('duration_seconds', 0.0):.2f} —Å–µ–∫—É–Ω–¥")

        ExperimentRunner._save_results = mock_save_results
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º logger –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è ClearML
        def mock_logger_report_scalar(self, title, series, value, iteration=None):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π logger –≤–º–µ—Å—Ç–æ self.logger
            import logging
            logger = logging.getLogger(__name__)
            logger.info(f"üìä {title}/{series}: {value}")
        
        def mock_logger_report_text(self, text):
            import logging
            logger = logging.getLogger(__name__)
            logger.info(f"üìù {text}")
        
        # –ú–æ–∫–∞–µ–º logger
        import types
        runner.logger.report_scalar = types.MethodType(mock_logger_report_scalar, runner.logger)
        runner.logger.report_text = types.MethodType(mock_logger_report_text, runner.logger)

        runner.run(model, retriever, dataset)

        logger.info("üéâ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_dir}/")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: {e}")
        logger.error(traceback.format_exc())
        logger.info("üí• –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
        return False
    return True

if __name__ == "__main__":
    run_experiment_with_config()
