#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:
- Natural Questions (NQ) –¥–∞–Ω–Ω—ã—Ö
- SimpleQA –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ S3

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    poetry run python download_from_s3.py --help
"""

import boto3
import json
import argparse
from pathlib import Path
from typing import Dict, Any, Optional, List
import logging
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def load_s3_config() -> Dict[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é S3 –∏–∑ .env —Ñ–∞–π–ª–∞."""
    load_dotenv()
    
    config = {
        'aws_access_key_id': os.getenv('CLEARML_S3_ACCESS_KEY'),
        'aws_secret_access_key': os.getenv('CLEARML_S3_SECRET_KEY'),
        'region_name': os.getenv('CLEARML_S3_REGION', 'us-east-1'),
        'endpoint_url': os.getenv('CLEARML_S3_ENDPOINT'),
        'bucket': os.getenv('CLEARML_S3_BUCKET')
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    required = ['aws_access_key_id', 'aws_secret_access_key', 'bucket']
    missing = [key for key in required if not config[key]]
    
    if missing:
        raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ .env: {missing}")
    
    return config

def create_s3_client(config: Dict[str, str]) -> boto3.client:
    """–°–æ–∑–¥–∞–µ—Ç S3 –∫–ª–∏–µ–Ω—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
    s3_config = {
        'aws_access_key_id': config['aws_access_key_id'],
        'aws_secret_access_key': config['aws_secret_access_key'],
        'region_name': config['region_name']
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º endpoint_url –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω (–¥–ª—è MinIO –∏ –¥—Ä—É–≥–∏—Ö S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â)
    if config.get('endpoint_url'):
        s3_config['endpoint_url'] = config['endpoint_url']
    
    return boto3.client('s3', **s3_config)

def download_file_from_s3(
    s3_client: boto3.client,
    bucket: str,
    s3_key: str,
    local_file: Path,
    overwrite: bool = False
) -> bool:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ S3.
    
    Args:
        s3_client: S3 –∫–ª–∏–µ–Ω—Ç
        bucket: –ò–º—è bucket
        s3_key: S3 –∫–ª—é—á (–ø—É—Ç—å –≤ bucket)
        local_file: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        overwrite: –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if local_file.exists() and not overwrite:
        logger.warning(f"–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {local_file}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --overwrite –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏.")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    local_file.parent.mkdir(parents=True, exist_ok=True)
    
    try:
        logger.info(f"–°–∫–∞—á–∏–≤–∞–µ–º s3://{bucket}/{s3_key} -> {local_file}")
        
        s3_client.download_file(bucket, s3_key, str(local_file))
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {local_file}")
        return True
        
    except s3_client.exceptions.NoSuchKey:
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3: s3://{bucket}/{s3_key}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è s3://{bucket}/{s3_key}: {e}")
        return False

def list_s3_files(s3_client: boto3.client, bucket: str, prefix: str = "") -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ S3 bucket —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º."""
    try:
        response = s3_client.list_objects_v2(Bucket=bucket, Prefix=prefix)
        files = []
        
        if 'Contents' in response:
            for obj in response['Contents']:
                files.append(obj['Key'])
        
        return files
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return []

def download_nq_data(s3_client: boto3.client, bucket: str, data_dir: Path, overwrite: bool = False):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç NQ –¥–∞–Ω–Ω—ã–µ –∏–∑ S3."""
    logger.info("üìä –°–∫–∞—á–∏–≤–∞–µ–º Natural Questions –¥–∞–Ω–Ω—ã–µ...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    nq_files = [
        ('NQ-open.dev.merged.jsonl', 'NQ-open.dev.merged.jsonl'),      # –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        ('nq_full_dataset.json', 'nq_full_dataset.json'),              # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        ('nq_converted_eval.json', 'nq_converted_eval.json'),          # Eval –¥–∞–Ω–Ω—ã–µ
        ('nq_converted_train.json', 'nq_converted_train.json')          # Train –¥–∞–Ω–Ω—ã–µ
    ]
    
    success_count = 0
    for s3_key, local_path in nq_files:
        # NQ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ data/nq/
        local_file = data_dir / 'nq' / local_path
        if download_file_from_s3(s3_client, bucket, s3_key, local_file, overwrite):
            success_count += 1
    
    logger.info(f"üìà –°–∫–∞—á–∞–Ω–æ {success_count} NQ —Ñ–∞–π–ª–æ–≤")

def download_simple_qa_data(s3_client: boto3.client, bucket: str, data_dir: Path, overwrite: bool = False):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç SimpleQA –¥–∞–Ω–Ω—ã–µ –∏–∑ S3."""
    logger.info("üìä –°–∫–∞—á–∏–≤–∞–µ–º SimpleQA –¥–∞–Ω–Ω—ã–µ...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    simple_qa_files = [
        ('simple_qa_test_set_with_documents.csv', 'simple_qa_test_set_with_documents.csv'),  # –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        ('simple_qa_converted.json', 'simple_qa_converted.json'),                              # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        ('simple_qa_train.json', 'simple_qa_train.json'),                                     # Train –¥–∞–Ω–Ω—ã–µ
        ('simple_qa_eval.json', 'simple_qa_eval.json')                                         # Eval –¥–∞–Ω–Ω—ã–µ
    ]
    
    success_count = 0
    for s3_key, local_path in simple_qa_files:
        # SimpleQA —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ data/simple_qa/
        local_file = data_dir / 'simple_qa' / local_path
        if download_file_from_s3(s3_client, bucket, s3_key, local_file, overwrite):
            success_count += 1
    
    logger.info(f"üìà –°–∫–∞—á–∞–Ω–æ {success_count} SimpleQA —Ñ–∞–π–ª–æ–≤")

def download_custom_file(s3_client: boto3.client, bucket: str, s3_key: str, local_file: Path, overwrite: bool = False):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–∑ S3."""
    logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ñ–∞–π–ª: s3://{bucket}/{s3_key}")
    
    if download_file_from_s3(s3_client, bucket, s3_key, local_file, overwrite):
        logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {local_file}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: s3://{bucket}/{s3_key}")

def browse_s3_bucket(s3_client: boto3.client, bucket: str, prefix: str = ""):
    """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ S3 bucket."""
    logger.info(f"üîç –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket: {bucket}")
    if prefix:
        logger.info(f"üìÅ –ü—Ä–µ—Ñ–∏–∫—Å: {prefix}")
    
    files = list_s3_files(s3_client, bucket, prefix)
    
    if files:
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤:")
        for file in files:
            logger.info(f"  - {file}")
    else:
        logger.info("üì≠ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def test_s3_connection(s3_client: boto3.client, bucket: str) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3."""
    try:
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3 bucket: {bucket}")
        s3_client.head_bucket(Bucket=bucket)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3 —É—Å–ø–µ—à–Ω–æ!")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description='–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ S3 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞')
    parser.add_argument('--mode', choices=['nq', 'simple_qa', 'custom', 'browse', 'test'], required=True,
                       help='–†–µ–∂–∏–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: nq, simple_qa, custom, browse, test')
    parser.add_argument('--data-dir', default='data',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data)')
    parser.add_argument('--s3-key',
                       help='S3 –∫–ª—é—á –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–¥–ª—è —Ä–µ–∂–∏–º–∞ custom)')
    parser.add_argument('--local-file',
                       help='–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–ª—è —Ä–µ–∂–∏–º–∞ custom)')
    parser.add_argument('--prefix',
                       help='–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ (–¥–ª—è —Ä–µ–∂–∏–º–∞ browse)')
    parser.add_argument('--overwrite', action='store_true',
                       help='–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã')
    parser.add_argument('--bucket',
                       help='S3 bucket (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env)')
    
    args = parser.parse_args()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é S3
        config = load_s3_config()
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º bucket –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if args.bucket:
            config['bucket'] = args.bucket
        
        # –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç
        s3_client = create_s3_client(config)
        bucket = config['bucket']
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not test_s3_connection(s3_client, bucket):
            return 1
        
        data_dir = Path(args.data_dir)
        
        if args.mode == 'test':
            logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return 0
        
        elif args.mode == 'browse':
            browse_s3_bucket(s3_client, bucket, args.prefix or "")
        
        elif args.mode == 'nq':
            download_nq_data(s3_client, bucket, data_dir, args.overwrite)
        
        elif args.mode == 'simple_qa':
            download_simple_qa_data(s3_client, bucket, data_dir, args.overwrite)
        
        elif args.mode == 'custom':
            if not args.s3_key or not args.local_file:
                logger.error("–î–ª—è —Ä–µ–∂–∏–º–∞ custom –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --s3-key –∏ --local-file")
                return 1
            
            local_file = Path(args.local_file)
            download_custom_file(s3_client, bucket, args.s3_key, local_file, args.overwrite)
        
        logger.info("üéâ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == '__main__':
    exit(main())
