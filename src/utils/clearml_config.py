"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ClearML —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
"""

import os
from pathlib import Path
from typing import Dict, Any, Optional
from dotenv import load_dotenv
from clearml import Task, Logger


def load_clearml_config(env_file: Optional[str] = None) -> Dict[str, str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ClearML –∏–∑ .env —Ñ–∞–π–ª–∞
    
    Args:
        env_file: –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ClearML
    """
    if env_file is None:
        # –ò—â–µ–º .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_root = Path(__file__).parent.parent.parent
        env_file = project_root / ".env"
    
    if not Path(env_file).exists():
        raise FileNotFoundError(f"–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv(env_file)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ClearML
    config = {}
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ClearML
    clearml_vars = [
        'CLEARML_API_HOST',
        'CLEARML_WEB_HOST', 
        'CLEARML_FILES_HOST',
        'CLEARML_S3_ENDPOINT',
        'CLEARML_S3_BUCKET',
        'CLEARML_S3_ACCESS_KEY',
        'CLEARML_S3_SECRET_KEY',
        'CLEARML_S3_REGION',
        'CLEARML_S3_PATH_STYLE',
        'CLEARML_S3_VERIFY_SSL'
    ]
    
    for var in clearml_vars:
        value = os.getenv(var)
        if value is not None:
            config[var] = value
    
    return config


def setup_clearml_environment(env_file: Optional[str] = None) -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è ClearML
    
    Args:
        env_file: –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
    """
    config = load_clearml_config(env_file)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è ClearML
    for key, value in config.items():
        os.environ[key] = value
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è S3
    if 'CLEARML_S3_ENDPOINT' in config:
        os.environ['CLEARML_S3_ENDPOINT'] = config['CLEARML_S3_ENDPOINT']
    if 'CLEARML_S3_BUCKET' in config:
        os.environ['CLEARML_S3_BUCKET'] = config['CLEARML_S3_BUCKET']
    if 'CLEARML_S3_ACCESS_KEY' in config:
        os.environ['CLEARML_S3_ACCESS_KEY'] = config['CLEARML_S3_ACCESS_KEY']
    if 'CLEARML_S3_SECRET_KEY' in config:
        os.environ['CLEARML_S3_SECRET_KEY'] = config['CLEARML_S3_SECRET_KEY']
    if 'CLEARML_S3_REGION' in config:
        os.environ['CLEARML_S3_REGION'] = config['CLEARML_S3_REGION']
    if 'CLEARML_S3_PATH_STYLE' in config:
        os.environ['CLEARML_S3_PATH_STYLE'] = config['CLEARML_S3_PATH_STYLE']
    if 'CLEARML_S3_VERIFY_SSL' in config:
        os.environ['CLEARML_S3_VERIFY_SSL'] = config['CLEARML_S3_VERIFY_SSL']


def create_clearml_task(
    project_name: str = "slm-experiments",
    task_name: str = "experiment",
    tags: Optional[list] = None,
    env_file: Optional[str] = None
) -> Task:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç ClearML Task —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
    
    Args:
        project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ ClearML
        task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        tags: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏
        env_file: –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ClearML Task
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    setup_clearml_environment(env_file)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    task = Task.init(
        project_name=project_name,
        task_name=task_name,
        tags=tags or [],
        auto_connect_frameworks=False  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
    )
    
    return task


def get_clearml_logger() -> Logger:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π ClearML Logger
    
    Returns:
        ClearML Logger
    """
    return Logger.current_logger()


def log_experiment_config(logger: Logger, config: Dict[str, Any]) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –≤ ClearML
    
    Args:
        logger: ClearML Logger
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    """
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.report_text("üöÄ –ù–∞—á–∞–ª–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
    logger.report_text(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {config.get('output_dir', 'unknown')}")
    logger.report_text(f"ü§ñ –ú–æ–¥–µ–ª—å: {config.get('model', {}).get('name', 'unknown')}")
    logger.report_text(f"üìä –î–∞—Ç–∞—Å–µ—Ç: {config.get('dataset', {}).get('name', 'unknown')}")
    logger.report_text(f"üîç –†–µ–∂–∏–º: {config.get('experiment_mode', {}).get('name', 'unknown')}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    logger.report_text("üìã –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:")
    for section, values in config.items():
        if isinstance(values, dict):
            logger.report_text(f"  {section}:")
            for key, value in values.items():
                logger.report_text(f"    {key}: {value}")
        else:
            logger.report_text(f"  {section}: {values}")


def log_prompt_template(logger: Logger, prompt_template_no_context: str, 
                        prompt_template_with_context: str, use_context: bool) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ
    
    Args:
        logger: ClearML Logger
        prompt_template_no_context: –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        prompt_template_with_context: –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        use_context: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—É—â–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ
    """
    logger.report_text("üìù –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞:")
    logger.report_text("")
    
    if use_context:
        logger.report_text("```")
        logger.report_text(prompt_template_with_context)
        logger.report_text("```")
    else:
        logger.report_text("```")
        logger.report_text(prompt_template_no_context)
        logger.report_text("```")


def log_predictions_to_clearml(logger: Logger, predictions: list, max_examples: int = 100) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ ClearML
    
    Args:
        logger: ClearML Logger
        predictions: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (PredictionItem objects or dicts)
        max_examples: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    logger.report_text(f"üìù –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–≤—ã–µ {min(len(predictions), max_examples)} –∏–∑ {len(predictions)}):")
    
    for i, pred in enumerate(predictions[:max_examples]):
        logger.report_text(f"\n--- –ü—Ä–∏–º–µ—Ä {i+1} ---")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –æ–±—ä–µ–∫—Ç–æ–≤, —Ç–∞–∫ –∏ —Å–ª–æ–≤–∞—Ä–µ–π
        if hasattr(pred, 'question'):
            # –≠—Ç–æ –æ–±—ä–µ–∫—Ç PredictionItem
            logger.report_text(f"–í–æ–ø—Ä–æ—Å: {pred.question}")
            logger.report_text(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {pred.predicted_answer}")
            logger.report_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {pred.ground_truth}")
            logger.report_text(f"Token Recall: {pred.token_recall:.4f}")
            
            if pred.contexts:
                logger.report_text(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {pred.contexts}")
        else:
            # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            logger.report_text(f"–í–æ–ø—Ä–æ—Å: {pred.get('question', 'N/A')}")
            logger.report_text(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {pred.get('predicted_answer', 'N/A')}")
            logger.report_text(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {pred.get('ground_truth', 'N/A')}")
            logger.report_text(f"Token Recall: {pred.get('token_recall', 0.0):.4f}")
            
            if pred.get('contexts'):
                logger.report_text(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {pred.get('contexts', [])}")
    
    if len(predictions) > max_examples:
        logger.report_text(f"\n... –∏ –µ—â–µ {len(predictions) - max_examples} –ø—Ä–∏–º–µ—Ä–æ–≤")


def log_metrics_to_clearml(logger: Logger, metrics: Dict[str, float]) -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ ClearML –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—É –∏ —Å–∫–∞–ª—è—Ä—ã
    
    Args:
        logger: ClearML Logger
        metrics: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    def format_metric_value(key: str, value) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë —Ç–∏–ø–∞."""
        if not isinstance(value, (int, float)):
            return str(value)
        
        # –ë–∞–π—Ç—ã - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
        if 'bytes' in key.lower():
            return f"{int(value):,}"
        # MB - 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        elif 'mb' in key.lower() or 'ram' in key.lower():
            return f"{value:.2f}"
        # Recall –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ - 4 –∑–Ω–∞–∫–∞
        elif 'recall' in key.lower() or 'precision' in key.lower() or 'f1' in key.lower():
            return f"{value:.4f}"
        # –í—Ä–µ–º—è - 2 –∑–Ω–∞–∫–∞
        elif 'time' in key.lower() or 'duration' in key.lower() or 'seconds' in key.lower():
            return f"{value:.2f}"
        # –°—á–µ—Ç—á–∏–∫–∏ - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
        elif 'num' in key.lower() or 'count' in key.lower() or 'examples' in key.lower():
            return f"{int(value)}"
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 4 –∑–Ω–∞–∫–∞
        else:
            return f"{value:.4f}" if isinstance(value, float) else str(value)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
    logger.report_text("üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:")
    logger.report_text("")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    quality_metrics = {}
    memory_metrics = {}
    size_metrics = {}
    other_metrics = {}
    
    for key, value in metrics.items():
        key_lower = key.lower()
        if 'recall' in key_lower or 'precision' in key_lower or 'f1' in key_lower:
            quality_metrics[key] = value
        elif 'ram' in key_lower or 'memory' in key_lower:
            memory_metrics[key] = value
        elif 'size' in key_lower:
            size_metrics[key] = value
        else:
            other_metrics[key] = value
    
    # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    if quality_metrics:
        logger.report_text("üéØ –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
        for k, v in quality_metrics.items():
            logger.report_text(f"  {k}: {format_metric_value(k, v)}")
        logger.report_text("")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞
    if size_metrics:
        logger.report_text("üì¶ –†–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞:")
        for k, v in size_metrics.items():
            logger.report_text(f"  {k}: {format_metric_value(k, v)}")
        logger.report_text("")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    if memory_metrics:
        logger.report_text("üíæ –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
        for k, v in memory_metrics.items():
            logger.report_text(f"  {k}: {format_metric_value(k, v)} MB")
        logger.report_text("")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if other_metrics:
        logger.report_text("üìã –ü—Ä–æ—á–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")
        for k, v in other_metrics.items():
            logger.report_text(f"  {k}: {format_metric_value(k, v)}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ PLOTS
    try:
        import pandas as pd
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (–∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        df = pd.DataFrame([{
            'Metric': k,
            'Value': format_metric_value(k, v)
        } for k, v in metrics.items()])
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—É –≤ PLOTS
        logger.report_table(
            title="Final Metrics",
            series="Summary",
            table_plot=df,
            iteration=0
        )
    except Exception as e:
        # Fallback –µ—Å–ª–∏ pandas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        logger.report_text(f"‚ö†Ô∏è  Could not create metrics table: {e}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–µ—Ç—Ä–∏–∫—É –∫–∞–∫ single value scalar (–±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞)
    for metric_name, value in metrics.items():
        if isinstance(value, (int, float)):
            logger.report_single_value(
                name=metric_name,
                value=value
            )
